# -*- coding: utf-8 -*-
"""Algorithm-G.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eTT6WjevBXThHiMAuR49ZZ0SOmDYRdzJ
"""

import numpy as np
import random

class DNA():
  #Declarated object about our model 
  def __init__(self, target, n_individuals, n_selection, mutation_rate, n_generations, verbose = True):
    self.target = target
    self.n_individuals = n_individuals
    self.n_selection = n_selection
    self.mutation_rate = mutation_rate
    self.n_generations = n_generations
  

  def create_individual(self, min = 0, max = 9):
    individual = [random.choice(['A', 'B']) for i in range(len(self.target))]
    return individual
  
  def create_population(self):
    population = [self.create_individual() for i in range(self.n_individuals)]
    return population
  
  def fitness(self, individual):
    # Evaluar el individuo
    fitness = 0
    for i in range(len(individual)):
      if individual[i] == self.target[i]:
        if i == 0:
          fitness += 2 
        if i == 1:
          fitness += 2
        if i == 2:
          fitness += 3
        if i == 3:
          fitness += 1
        
    return fitness

  def selection(self, population):
    scores = [(self.fitness(i), i) for i in range(population)]
    scores = [i[1] for i in sorted(scores)]

    selected = scores[len(scores) - self.n_selection :]
    return selected
  
  def reproduction(self, population, selected):
    point = 0
    father = []

    for i in range(len(population)):
      point = np.random.randint(1, len(self.target)-1)
      father = random.sample(selected, 2)

      population[i][:point] = father[0][:point]
      population[i][point:] = father[1][point:]

    return population
  
  def mutation(self, population):

    for i in range(len(population)):
      if random.random() <= self.mutation_rate:
        point = random.randint(1, len(self.target)-1)
        new_value = random.choice(['A', 'B'])

        while new_value == population[i][point]:
          new_value = random.choice(['A', 'B'])
        
        population[i][point] = new_value
    return population
  
  


def main():
  #Create a list with the gen that we want
  target = ['A', 'A', 'A', 'B']
  model = DNA(target = target,n_individuals = 15, n_selection = 4,mutation_rate=0.7, n_generations = 2 )
  #model.create_individual()


if __name__ == '__main__':
  main()